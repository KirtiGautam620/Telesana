generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mysql"
  url       = env("DATABASE_URL")
}



enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum AppointmentMode {
  VIDEO
  IN_PERSON
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum Gender {
  M
  F
}


model User {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String    @unique
  password  String    
  patient   Patient?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}




model Patient {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  phone     String?   @unique
  gender    Gender
  dob       DateTime  @db.Date
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt 
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  healthPassbook HealthPassbook?
  appointments   Appointment[]
  prescriptions  Prescription[]
}



model HealthPassbook {
  id          String        @id @default(uuid())
  patient     Patient       @relation(fields: [patientId], references: [id])
  patientId   String        @unique
  healthData  Json
  riskLevel   RiskLevel
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Doctor {
  id             String            @id @default(uuid())
  doctor_name    String
  specialisation String
  qualification  String
  experience     Int
  fees           Decimal           @db.Decimal(10, 2)
  availableSlots AppointmentSlot[]
  appointments   Appointment[]
  prescription   Prescription[]
}

model Appointment {
  id              String            @id @default(uuid())
  patientId       String
  patient         Patient           @relation(fields: [patientId], references: [id])
  doctorId        String
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  mode            AppointmentMode
  appointmentTime DateTime
  status          AppointmentStatus
  prescriptions   Prescription[]
  createdAt       DateTime          @default(now())
}

model AppointmentSlot {
  id        String   @id @default(uuid())
  doctorId  String
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  startTime DateTime
  endTime   DateTime
  isBooked  Boolean  @default(false)
}

model Prescription {
  id            String      @id @default(uuid())
  patientId     String
  patient       Patient     @relation(fields: [patientId], references: [id])
  doctorId      String
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  medicines     String
  createdAt     DateTime    @default(now())
  reminders     Reminder[]
}

model Reminder {
  id             String       @id @default(uuid())
  prescriptionId String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  message        String
  remindAt       DateTime
  sent           Boolean      @default(false)
}